// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  phone         String?
  password      String
  role          Role          @default(USER)
  orders        Order[]
  addresses     Address[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  images        String[]
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  stock         Int           @default(0)
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Category {
  id            String         @id @default(cuid())
  name          String
  description   String?
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Order {
   id              String            @id @default(cuid())
  reference       String            @unique  // Changed from orderNumber to reference
  customerName    String
  email           String
  phone           String
  address         String
  city           String
  state          String
  paymentMethod  String
  total          Float
  subtotal       Float
  shipping       Float
  status         OrderStatus       @default(PENDING)
  items          OrderItem[]
  user           User?             @relation(fields: [userId], references: [id])
  userId         String?
  shippingAddress ShippingAddress?
  address_rel     Address?         @relation(fields: [addressId], references: [id])
  addressId       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([userId])
  @@index([addressId])
}

model Address {
  id            String         @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  street        String
  city          String
  state         String
  country       String
  zipCode       String
  isDefault     Boolean       @default(false)
  orders        Order[]       // This relation is now properly connected
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  size      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
    id      String @id @default(cuid())
    street  String
    city    String
    state   String
    country String
    orderId String @unique
    order   Order  @relation(fields: [orderId], references: [id])
}

// Remove the second Address model (lines 120-131)

model Coupon {
  id            String         @id @default(cuid())
  code          String         @unique
  discount      Float
  type          DiscountType
  minAmount     Float?
  maxDiscount   Float?
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
